package com.tj703.webapp_server_study.model2_service.dao;

import com.tj703.webapp_server_study.model2_service.dto.UserDto;

public interface UserDao {
    // dao 만들기 전에 뭐 필요한지 구상하기
    // ㅡㅡ서비스 웹앱
    //  로그인 id pw
    //  회원가입 여러정보
    //  (제한적 수정)

    // ㅡㅡ관리자 웹앱
    //  유저 전체 조회
    //  수정
    //  삭제

    // UserDto findByIdAndPw(String id, String pw); // 보다 구체적으로 쓰길 바람.
    UserDto findByUserIdAndPassword(int id, String pw) throws Exception;

    UserDto findByemailAndPassword(String email, String password) throws Exception;
    UserDto findByEmail(String email) throws Exception;

    int insert(UserDto user) throws Exception;

    int updateSetPasswordByEmail(UserDto user) throws Exception;
}

/*
현 수업에서 진행하는 것은 서비스로직과 트랜젝션이다.

>>>  애플리케이션 계층(Application Layers)
    1. 프리젠테이션 계층 (Presentation Layer)  (Controller Layer, UI, API 등)
        사용자 인터페이스(UI)와 상호작용하며, 사용자로부터 입력을 받고 결과를 반환하는 계층입니다.

    2. 컨트롤러 계층 (Controller Layer)
        사용자 요청을 받아서 해당 서비스로 전달하고, 처리 결과를 사용자에게 반환하는 역할을 합니다.
        보통 웹 애플리케이션에서 사용자가 HTTP 요청을 보낼 때, 이 계층은 요청을 받아서 서비스 계층에 전달하고, 그 결과를 반환하는 역할

    3. 서비스 계층 (Service Layer)
        애플리케이션의 비즈니스 로직을 처리하며, 여러 비즈니스 로직을 조합하여 서비스를 제공하고, 데이터베이스와 상호작용을 관리합니다.

    4. 레포지토리 계층 (Repository Layer)
        데이터베이스와 상호작용하여 데이터를 생성(Create), 읽기(Read), 수정(Update), 삭제(Delete)하는 역할을 담당합니다.

    5. 도메인 계층 (Domain Layer)
        애플리케이션의 핵심 데이터와 도메인 객체를 정의하고, 이들을 관리합니다.

    6. 통합 계층 (Integration Layer)
        외부 시스템과의 연동 및 데이터 송수신을 담당하는 계층입니다.

이 계층 구조는 모든 종류의 애플리케이션에서 흔히 사용되며, MVC(Model-View-Controller) 또는 3계층 아키텍처 등으로 나타날 수 있습니다.


>>> MVC  아키텍쳐 구조와 계층 이해
    1. MVC (Model-View-Controller)
        Model: 애플리케이션의 데이터와 비즈니스 로직을 처리하는 부분입니다.
        View: 사용자 인터페이스(UI)를 처리하는 부분입니다.
        Controller: 사용자 입력을 처리하고, Model과 View 간의 상호작용을 조정하는 부분입니다.

    2. Model ; Model은 기본적으로 두 가지를 포함
        2-1.  데이터:
            데이터베이스와 연결된 객체나 DTO(Data Transfer Object), 엔티티 등이 포함됩니다.
             예를 들어, User, Order, Product 등과 같은 객체들이 모델로서 존재할 수 있습니다.
        2.2  비즈니스 로직:
            비즈니스 로직은 애플리케이션의 핵심 기능을 정의하는 부분.  애플리케이션이 실제로 수행해야 하는 작업이나 규칙.
            서비스 로직을 포함하며, DB와 관련 없는 비즈니스 로직도 포함될 수 있습니다.
            예를 들어, 주문 처리 시스템에서 비즈니스 로직은 주문 금액을 계산하고, 할인 규칙을 적용하며, 배송비를 계산하는 과정.

        2-3. 서비스 로직 중 비지니스 로직이 있는 것
            비즈니스 로직은 "무엇을 해야 하는지"에 대한 규칙이고, 그 비즈니스 로직을 처리하기 위해서
            서비스 로직은 "어떻게 처리할지"에 대한 흐름을 관리하는 부분.
            비즈니스 로직은 업무 규칙에 해당하는 반면, 서비스 로직은 그 규칙을 (서버에서 DB와 결합하여) 어떻게 구현할지에 대한 흐름을 정의.

            서비스 로직은 비즈니스 로직을 여러 시스템과 결합하고, 서비스 계층에서 비즈니스 로직을 호출하여 필요한 데이터와 상태 변화를 관리.
            서비스 로직은 비즈니스 로직을 더 구조화하고 분리된 계층에서 처리하는 역할.
            서비스 로직은 비즈니스 로직을 조직화하고 서비스 계층에서 호출될 수 있는 형태로 제공하는 로직.
            서비스 계층은 비즈니스 로직을 실행하기 위한 중간 계층.
            서비스 계층은 여러 비즈니스 로직을 구성하고 조합하는 곳이며, 다른 계층(예: Controller)에서 서비스 계층을 호출하여 비즈니스 로직을 실행하도록 합니다.

            Model 안에서 비즈니스 로직을 처리하는 부분이 바로 서비스 로직
                서비스 로직은 일반적으로 Model에 포함되지만, DB와 직접적으로 관련되지 않은 비즈니스 로직을 담당하는 부분입니다.
                이 서비스 로직은 보통 DB에 대한 CRUD(Create, Read, Update, Delete) 작업과는 별개로, 애플리케이션의 상태 관리나 비즈니스 규칙을 다룹니다.
                예를 들어, 사용자가 주문을 할 때 할인율 계산이나 배송비 계산과 같은 로직은 DB와 직접적인 상호작용이 없지만, Model의 일부로 처리될 수 있습니다.
                예시1. 사용자 주문 시 할인율 적용: 사용자가 쿠폰을 사용한다고 가정했을 때, 해당 쿠폰의 유효성 검증 및 할인 금액 계산은 서비스 로직 내에서 처리될 수 있습니다.
                예시2. 결제 처리 로직: 결제 수단에 따른 결제 금액을 계산하거나, 거래 내역을 로깅하는 등의 작업은 서비스 로직에서 다룰 수 있습니다

            서비스= 서비스 로직이란, DAO(data access object)를 여러개 사용하여 일의 묶음을 묶음을 만든 것.
            서비스 로직이 한번 주르륵 실행되는 것이 하나의 트랜젝션.
            트랜젝션은 원자성을 가지기 때문에, 중간에 실패하면 롤백한다.

            서비스 하나에 여러 개의 dao를 사용하고, 그 순서가 있다. 그것이 서비스 로직.
            서비스 로직은 왜 필요하냐. 트랜젝션transaction 때문에.
            트랜젝션이란 일 단위로 묶는 것 (전부가 실행되거나, 전부가 안되거나 = 원자성)
            중간에 실패할 경우 롤백이 이루어짐

            1. 트랜잭션 (Transaction)
                여러 작업을 하나의 묶음으로 처리하는 단위.

            2. 원자성 (Atomicity)
                트랜잭션 내의 모든 작업이 완전히 성공하거나, 아니면 전혀 수행되지 않도록 보장.

            3. 커밋 (Commit)
                트랜잭션이 성공적으로 완료되면 변경된 데이터를 영구적으로 저장.

            4. 롤백 (Rollback)
                트랜잭션 중 오류가 발생하면, 모든 변경사항을 취소하고 초기 상태로 되돌림.

 */
